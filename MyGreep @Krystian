import greenfoot.*; // (World, Actor, GreenfootImage, and Greenfoot)

public class MyGreep extends Greep {
    // Remember: you cannot extend the Greep's memory. So:
    // no additional fields (other than final fields) allowed in this class!

    /**
     * Default constructor. Do not remove.
     */
    public MyGreep(Ship ship) {
        super(ship);
        // Initialize arrays to avoid some NullPointerExceptions @Krystian
        setMemory(0, 0);
        setMemory(1, 0);
        setMemory(2, 0);
        setMemory(3, 0);
        setFlag(1, false);
        setFlag(2, false);

    }

    /**
     * Do what a greep's gotta do.
     */
    public void act() {
        super.act(); // do not delete! leave as first statement in act().

        // Before moving, lets check for food.
        checkFood();
        setMemory(3,0); //Reset memory
        setFlag(1, false); // memory reset @Mark

        if (carryingTomato()) {
            bringTomatoHome();
        } else if (getTomatoes() != null) {
            setFlag(1, true); // Let's show others that we are at the center of the pile. @Krystian -- changed to setflag @Mark
            TomatoPile tomatoes = getTomatoes();
            if (!blockAtPile(tomatoes)) {
                // Not blocking so lets go towards the centre of the pile
                turnTowards(tomatoes.getX(), tomatoes.getY());
                move();
            }
        } else  if (getMemory(0) == 1) {
            // Hmm. We know where there are some tomatoes...
            if (distanceTo(getMemory(1), getMemory(2)) < 20 && (getTomatoes() == null)) {// If we are at the cooridates from our memory and there is no tomatoes it means we have to reset our memory @Krystian
                setMemory(0, 0);
            }
            turnTowards(getMemory(1), getMemory(2));
            move();

        } else if (!(getFriend() == null)) { // Is there any friend next to us? @Krystian
            Greep friend = getFriend();
            if (friend.getFlag(1) == true) { // Is he on pile? @Krystian -- changed to flags @Mark
                turnTowards(friend.getX(), friend.getY()); // Let's move to him. @Krystian
                move();
            } else if ((getMemory(0) == 0) && (friend.getMemory(0) == 1)) { // Does he know where is pile? (and we don't) @Krystian
                setMemory(0, 1);
                setMemory(1, friend.getMemory(1));
                setMemory(2, friend.getMemory(2));
            }

        } 
        TomatoPile tomatoes = getTomatoes();
        if (!blockAtPile(tomatoes)) { // If we are not blocking we can blow something up. (Without this statement it was just breaking our block). @Krystian
            if (numberOfOpponents(true) > numberOfFriends(true)) { //Is there more opponents carrying tomato than friends? If yes we want to kablam ASAP.
                kablam();
            } else if (numberOfOpponents(true) == numberOfFriends(true)) { //If there's the same amount of both friendyl and unfriendly greeps carrying tomatos we have to consider one more thing...
                if (numberOfOpponents(false) > (numberOfFriends(false) + 1))  // ... Is there TWO more opponents not carrying tomatos? If yes -> kablam.
                    kablam(); 
                else
                    randomWalk();
            } else if (numberOfOpponents(true) < numberOfFriends(true)) { // If there's more friends than enemies carrying tomato we don't really want to blow ourselfs. Unless...
                if (((numberOfOpponents(true) + 1 ) == numberOfFriends(true)) && (numberOfOpponents(false) > (numberOfFriends(false) + 2)))  // There's is just one more friend carrying tomato and THREE more opponents not carrying toamtos.
                    kablam();
                else
                    randomWalk();
            } else   
                randomWalk();
        }

        if (atWater() || moveWasBlocked())  { 
            if (moveWasBlocked() && numberOfFriends(true) == 0) { // If someone blocking us why not just kablam him?
                kablam();
            } else { 
                // Avoid obstacles - ADDED A 50/50 to go left or right so Greeps would 
                // spread out more and not follow water edge @James
                // some more versions of turnin so greeps don't block on some curvy places @Krystian
                // If we were blocked, try to move somewhere else
                int x = Greenfoot.getRandomNumber(100);

                
                if (x <= 40) {
                    turn(180);
                    move();
                    move();
                    move();
                    move();
                } else if (x <= 55) {
                    turn(40);
                    move();
                } else if (x <= 70) {
                    turn(80);
                    move();
                } else if (x <= 80) {
                    turn(110);
                    move();
                } else if (x <= 90) {
                    turn(150);
                    move();
                } else {
                    turn(170);
                    move();
                    move();
                    move();
                }
            }

        }

    }

    /**
     * Is there any food here where we are? If so, try to load some!
     */
    public void checkFood() {
        TomatoPile tomatoes = getTomatoes();
        if (tomatoes != null) {
            loadTomato();
            // Note: this attempts to load a tomato onto *another* Greep. It
            // won't
            // do anything if we are alone here.

            setMemory(0, 1);
            setMemory(1, tomatoes.getX());
            setMemory(2, tomatoes.getY());

        }

    }

    /**
     * Move forward, with a slight chance of turning randomly
     */
    private void randomWalk() {
        // there's a 3% chance that we randomly turn a little off course
        if (randomChance(3)) {
            turn((Greenfoot.getRandomNumber(3) - 1) * 100);
        }

        move();
    }

    /**
     * Bring a tomato to our ship. Drop it if we are at the ship.
     */
    private void bringTomatoHome() 
    {
        int r = getRotation();
        if(atShip()) {
          dropTomato();
        }
        else  if(atWater() || moveWasBlocked()) {
          turn(180);
          move();
          move();
          turn(90);
          move();
          move();
       }
         else{
         turnHome();
         move();
         move();
         turn(250);
         move();
         move();
         turn(150);
         move();
         move();
         turn(50);
         move();
         move();
        }
    }

    /**
     * If we are at a tomato pile and none of our friends are blocking, we will
     * block.
     * 
     * @return True if we are blocking, false if not.
     */
    private boolean blockAtPile(TomatoPile tomatoes) {
        // Are we at the centre of the pile of tomatoes?
        boolean atPileCentre = tomatoes != null && distanceTo(tomatoes.getX(), tomatoes.getY()) < 8;
        if (atPileCentre && getFriend() == null) {
            // No friends at this pile, so we might as well block
            block();
            return true;
        } else {
            return false;
        }
    }

    private int distanceTo(int x, int y) {
        int deltaX = getX() - x;
        int deltaY = getY() - y;
        return (int) Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    }

    /**
     * This method specifies the name of the author (for display on the result
     * board).
     */
    public String getName() {
        return "Krystian";
    }
}
